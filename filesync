#!/bin/python
'''
filesync
'''
import sys
import json
import click

from utils import prints
from utils import utils
from classes.configs import Configs
from classes.local_connector import LocalConnector
from classes.ftp_connector import FtpConnector



@click.command()
@click.option('-i', '--init', 'is_init', type=bool, default=False, show_default=True, is_flag=True, help='Create the base configuration file.')
@click.option('-n', '--new', 'is_new', type=bool, default=False, show_default=True, is_flag=True, help='Create a new configuration with the selected key.')
@click.option('-m', '--modify', 'is_modify', type=bool, default=False, show_default=True, is_flag=True, help='Modify the selected configuration.')
@click.option('-d', '--delete', 'is_delete', type=bool, default=False, show_default=True, is_flag=True, help='Delete the selected configuration.')
@click.option('-ac', '--all-configs', 'is_all_configs', type=bool, default=False, show_default=True, is_flag=True, help='Execute all the configurations.')
@click.option('-ck', '--configs-key', 'configs_key', type=str, default='default', show_default=True, help='Select a configuration key.')
@click.option('-ftph', '--ftp-host', 'ftp_host', type=str, default=None, show_default=True, help='Ftp server for configs.')
@click.option('-ftpp', '--ftp-port', 'ftp_port', type=int, default=21, show_default=True, help='Ftp server port for configs.')
@click.option('-ftpu', '--ftp-user', 'ftp_user', type=str, default=None, show_default=True, help='Ftp user for configs.')
@click.option('-ftppw', '--ftp-password', 'ftp_password', type=str, default=None, show_default=True, help='Ftp password for configs.')
@click.option('-f', '--force', 'is_force', type=bool, default=False, show_default=True, is_flag=True, help='Force operations on destination.')
@click.argument('folder-path', type=str, default='.')
def _main(is_init, is_new, is_modify, is_delete, is_all_configs, configs_key, ftp_host, ftp_port, ftp_user, ftp_password, is_force, folder_path):
    '''
    Sync folders using che filesync-configs.json file inside the FOLDER_PATH folder.
    You must initialize and configure the filesync-configs.json.
    '''
    is_ftp = bool(ftp_host)

    if is_ftp:
        configs_filesync_connector = FtpConnector(folder_path, ftp_host, ftp_port, ftp_user, ftp_password)
    else:
        configs_filesync_connector = LocalConnector(folder_path)

    configs_path = configs_filesync_connector.resolve_path('filesync-configs.json')
    print(f"`configs_path` is `{configs_path}`")

    if is_init:
        configs_filesync_connector.write_file(json.dumps({
            'default': Configs.prompt_create().to_dict()
        }, indent=2).encode(), configs_path)
        sys.exit(0)

    if not configs_filesync_connector.is_entry(configs_path):
        prints.red(f"`{configs_path}` not found")
        sys.exit(1)
    if configs_filesync_connector.is_folder(configs_path):
        prints.red(f"`{configs_path}` is not a file")
        sys.exit(1)
    configs_dict_dict = json.loads(configs_filesync_connector.read_file(configs_path))

    if is_new:
        if configs_key == 'default':
            prints.red(f"Can't create `{configs_key}` configuration")
            sys.exit(1)
        configs_dict_dict[configs_key] = Configs.prompt_create().to_dict()
        configs_filesync_connector.write_file(json.dumps(configs_dict_dict, indent=2).encode(), configs_path)
        sys.exit(0)

    if configs_key not in configs_dict_dict:
        prints.red(f"`{configs_key}` configuration not found")
        sys.exit(1)
    configs = Configs.from_dict(configs_dict_dict[configs_key])

    if is_modify:
        configs.prompt_modify()
        configs_dict_dict[configs_key] = configs.to_dict()
        configs_filesync_connector.write_file(json.dumps(configs_dict_dict, indent=2).encode(), configs_path)
        sys.exit(0)

    if is_delete:
        if configs_key == 'default':
            prints.red(f"Can't delete `{configs_key}` configuration")
            sys.exit(1)
        del configs_dict_dict[configs_key]
        configs_filesync_connector.write_file(json.dumps(configs_dict_dict, indent=2).encode(), configs_path)
        sys.exit(0)

    configs_list = [
        configs
    ]
    if is_all_configs:
        configs_list = sorted([Configs.from_dict(configs_dict) for configs_dict in configs_dict_dict.values()], key=lambda configs: configs.order)

    for configs in configs_list:

        source_filesync_connector = None
        if configs.is_source_ftp:
            source_filesync_connector = FtpConnector(configs.source_path, click.prompt('source_ftp_host', type=str, default='', show_default=True), click.prompt('source_ftp_port', type=int, default=21, show_default=True), click.prompt('source_ftp_user', type=str, default='', show_default=True), click.prompt('source_ftp_password', type=str, default='', show_default=True, hide_input=True))
        else:
            source_filesync_connector = LocalConnector(configs.source_path)
        source_path = source_filesync_connector.root_path
        if not source_filesync_connector.is_entry(source_path):
            prints.red(f"`{source_path}` not found")
            continue
        if not source_filesync_connector.is_folder(source_path):
            prints.red(f"`{source_path}` is not a folder")
            continue
        print(f"`source_path` is `{source_path}`")

        destination_filesync_connector = None
        if configs.is_destination_ftp:
            destination_filesync_connector = FtpConnector(configs.destination_path, click.prompt('destination_ftp_host', type=str, default='', show_default=True), click.prompt('destination_ftp_port', type=int, default=21, show_default=True), click.prompt('destination_ftp_user', type=str, default='', show_default=True), click.prompt('destination_ftp_password', type=str, default='', show_default=True, hide_input=True))
        else:
            destination_filesync_connector = LocalConnector(configs.destination_path)
        destination_path = destination_filesync_connector.root_path
        if not destination_filesync_connector.is_entry(destination_path):
            prints.red(f"`{destination_path}` not found")
            continue
        if not destination_filesync_connector.is_folder(destination_path):
            prints.red(f"`{destination_path}` is not a folder")
            continue
        print(f"`destination_path` is `{destination_path}`")

        configs.folder_rename_dict = {source_filesync_connector.resolve_path(key): destination_filesync_connector.resolve_path(value) for key, value in configs.folder_rename_dict.items()}
        configs.file_rename_dict = {source_filesync_connector.resolve_path(key): destination_filesync_connector.resolve_path(value) for key, value in configs.file_rename_dict.items()}

        if source_path != destination_path:
            utils.sync(source_filesync_connector, source_path, destination_filesync_connector, destination_path, configs, is_force)

        configs.folder_ignore_regex_list = []
        configs.file_ignore_regex_list = []

        for key, value in configs.folder_rename_dict.items():
            prints.purple(f" || {key} -> {value}")
            if not source_filesync_connector.is_entry(key):
                prints.red(f"`{key}` not found")
                continue
            if not source_filesync_connector.is_folder(key):
                prints.red(f"`{key}` is not a folder")
                continue
            if not destination_filesync_connector.is_entry(value):
                destination_filesync_connector.make_folder(value)
            elif not destination_filesync_connector.is_folder(value):
                prints.red(f"`{value}` is not a folder")
                continue
            prints.purple(f" ?? {value}")
            utils.sync(source_filesync_connector, key, destination_filesync_connector, value, configs, is_force)

        for key, value in configs.file_rename_dict.items():
            prints.purple(f" || {key} -> {value}")
            if destination_filesync_connector.is_entry(value):
                if destination_filesync_connector.is_folder(value):
                    prints.red(f"`{value}` is not a file")
                    continue
                folder_path = destination_filesync_connector.folder_path(value)
                if not destination_filesync_connector.is_entry(folder_path):
                    destination_filesync_connector.make_folder(folder_path)
                elif not destination_filesync_connector.is_folder(folder_path):
                    prints.red(f"`{folder_path}` is not a folder")
                    continue
                if destination_filesync_connector.get_m_time(key) > destination_filesync_connector.get_m_time(value) or configs.is_force or is_force:
                    prints.green(f" -> {value}")
                    destination_filesync_connector.write_file(destination_filesync_connector.read_file(key), value)
                elif configs.is_dual and destination_filesync_connector.get_m_time(value) > destination_filesync_connector.get_m_time(key):
                    prints.blue(f" <- {value}")
                    destination_filesync_connector.write_file(destination_filesync_connector.read_file(value), key)
            else:
                prints.green(f" ++ {value}")
                destination_filesync_connector.write_file(source_filesync_connector.read_file(key), value)

        source_filesync_connector.quit()
        destination_filesync_connector.quit()



if __name__ == '__main__':
    # pylint: disable-next=no-value-for-parameter
    _main()
